name: Package and Release Sticky Fingers
env:
    NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
on:
  push:
    branches:
      - main

jobs:
  package_and_release:
    runs-on: ${{ matrix.os }}  #Package for Windows, macOS, and Linux
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]  

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x 

    - name: Install packaging dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r SnakeEyes/requirements.txt
        pip install pyinstaller
        pip install Pillow        #For icon conversion on Mac

    - name: Package executables
      run: |
        bash -c 'if [ "${{ runner.os }}" == "Windows" ]; then
          python -m PyInstaller --onefile --windowed --name="StickyFingers_Windows" --icon="SnakeEyes/Assets/Characters/Profile/Jeff Profile.png" --add-data="Fonts;Fonts" --add-data="SnakeEyes;SnakeEyes" sticky_fingers.py
        elif [ "${{ runner.os }}" == "macOS" ]; then
          python -m PyInstaller --onefile --windowed --name="StickyFingers_macOS" --icon="SnakeEyes/Assets/Characters/Profile/Jeff Profile.png" --add-data="Fonts:Fonts" --add-data="SnakeEyes:SnakeEyes" sticky_fingers.py
        else
          python -m PyInstaller --onefile --windowed --name="StickyFingers_Linux" --icon="SnakeEyes/Assets/Characters/Profile/Jeff Profile.png" --add-data="Fonts:Fonts" --add-data="SnakeEyes:SnakeEyes" sticky_fingers.py
        fi'
      

    - name: Release to GitHub under 'latest' tag
      uses: softprops/action-gh-release@v1
      with:
        tag_name: latest  #Overwrites previous release
        files: |
          dist/StickyFingers_Windows.exe
          dist/StickyFingers_macOS
          dist/StickyFingers_Linux
        draft: false  #Publish immediately
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  #GitHub provides this token automatically

    - name: Install Butler for Itch.io deployment
      run: |
        bash -c 'if [ "${{ runner.os }}" == "Windows" ]; then
          curl -L -o butler.zip https://broth.itch.ovh/butler/windows-amd64/LATEST/archive/default
          unzip butler.zip -d butler
        elif [ "${{ runner.os }}" == "macOS" ]; then
          curl -L -o butler.zip https://broth.itch.ovh/butler/darwin-amd64/LATEST/archive/default
          unzip butler.zip -d butler
          chmod +x butler/butler
          mv butler/butler /usr/local/bin/butler
        else
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip -d butler
          chmod +x butler/butler
          mv butler/butler /usr/local/bin/butler
        fi'
  
    - name: Deploy to Itch.io
      run: |
        bash -c 'if [ "${{ runner.os }}" == "Windows" ]; then
          cd butler
          ./butler push ../dist/StickyFingers_Windows.exe GammaTeamSE/sticky-fingers:windows
        elif [ "${{ runner.os }}" == "macOS" ]; then
          butler push dist/StickyFingers_macOS GammaTeamSE/sticky-fingers:mac
        else
          butler push dist/StickyFingers_Linux GammaTeamSE/sticky-fingers:linux
        fi'
      env:
        BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
